//Create Form or UserControl
//Create Button called "okButton"
//Create Button called "cancelButton"
//Create ErrorProvider called "errorProvider" & set icon
//Create ErrorProvider called "infoProvider" & set icon
//Set ok button click event to "okButton_Click"
//Set Controls Validating event to "Control_Validating"


using System;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

namespace BOMLibrary
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            TurnOffCancelButtonValidation();
            InitailizeControlToolTips();
            InitializeDialogButtons();
        }

        private void InitializeDialogButtons()
        {
            this.cancelButton.DialogResult = DialogResult.Cancel;
            this.okButton.DialogResult = DialogResult.OK;
        }

        private void InitailizeControlToolTips()
        {
            //Use tooltips to populate the "information provider"
            foreach (Control control in GetAllControls())
            {
                string toolTip = toolTip1.GetToolTip(control);
                if (toolTip.Length == 0) continue;
                infoProvider.SetError(control, toolTip);
            }
        }

        //Allow user to escape control on failed validation
        private void TurnOffCancelButtonValidation()
        {
            this.cancelButton.CausesValidation = false;
        }

        //Event listener method
        private void Control_Validating(object sender, CancelEventArgs e)
        {
            //Cast sender to Type
            Control control = (Control)sender;
            string error = null;

            //Validate control value
            if (string.IsNullOrWhiteSpace(control.Text))
            {
                //Specify error message
                error = "Field cannot be empty";

                //Alert user with error message next to control
                errorProvider.SetError(control, error);
                infoProvider.SetError(control, null);
                e.Cancel = true;
            }
            else
            {
                errorProvider.SetError(control, null);
                infoProvider.SetError(control, error);
            }
            
        }

        //Form submit button click event listener
        private void okButton_Click(object sender, EventArgs e)
        {
            foreach (Control control in GetAllControls())
            {
                //Validate each control manually
                control.Focus();
                if (!this.Validate())
                {
                    this.DialogResult = DialogResult.None;
                    break;
                }
            }
        }

        //Retrieve all controls and all child controls etc.
        //Make sure to send controls back at the lowest depth first
        //so that most child controls are checked for things before
        //container controls, e.g., a Textbox is checked before a
        //Groupbox control
        Control[] GetAllControls()
        {
            ArrayList allControls = new ArrayList();
            Queue queue = new Queue();
            queue.Enqueue(this.Controls);

            while (queue.Count > 0)
            {
                Control.ControlCollection controls = (Control.ControlCollection)queue.Dequeue();
                if (controls == null || controls.Count == 0) continue;

                foreach (Control control in controls)
                {
                    allControls.Add(control);
                    queue.Enqueue(control.Controls);
                }
            }

            return (Control[])allControls.ToArray(typeof(Control));
        }
    }
}
